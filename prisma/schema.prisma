datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum RoleType {
  regular
  cashier
  manager
  superuser
}

enum TransactionType {
  purchase
  redemption
  adjustment
  event
  transfer
}

enum PromotionType {
  automatic
  onetime
}

model User {
  id         Int          @id @default(autoincrement())
  utorid     String       @unique
  name       String?
  birthday   DateTime?
  points     Int          @default(0)
  createdAt  DateTime     @default(now())
  lastLogin  DateTime?
  avatarUrl  String?
  password   String?
  email      String?      @unique
  role       RoleType     @default(regular)
  verified   Boolean      @default(false)
  suspicious Boolean      @default(false)
  promotions Promotion[]  @relation("UserPromotions")
  ResetToken ResetToken[]
  organizedEvents EventOrganizer[]
  attendingEvents EventGuest[]
  createdTransactions Transaction[] @relation("CreatedTransactions")
  transactions Transaction[]        @relation("UserTransactions")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Promotion {
  id          Int           @id @default(autoincrement())
  name        String
  type        PromotionType
  startTime   DateTime
  endTime     DateTime
  minSpending Float?
  rate        Float?
  points      Int?
  createdAt   DateTime      @default(now())
  users       User[]        @relation("UserPromotions")
  transactions Transaction[]
}

model Event {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  location       String
  startTime      DateTime
  endTime        DateTime
  capacity       Int?
  points         Int
  pointsRemain   Int              @default(0)
  pointsAwarded  Int              @default(0)
  published      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organizers     EventOrganizer[]
  guests         EventGuest[]
  transactions   Transaction[]
}

model EventOrganizer {
  id       Int   @id @default(autoincrement())
  event    Event @relation(fields: [eventId], references: [id])
  eventId  Int
  user     User  @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([eventId, userId])
}

model EventGuest {
  id       Int   @id @default(autoincrement())
  event    Event @relation(fields: [eventId], references: [id])
  eventId  Int
  user     User  @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([eventId, userId])
}

model Transaction {
  id           Int              @id @default(autoincrement())
  type         TransactionType
  spent        Float?
  amount       Int?             // points gained/lost
  remark       String?
  suspicious   Boolean?         @default(false)
  processed    Boolean?         @default(false)
  createdAt    DateTime         @default(now())

  createdBy    User             @relation("CreatedTransactions", fields: [createdById], references: [id])
  createdById  Int

  user         User?            @relation("UserTransactions", fields: [userId], references: [id])
  userId       Int?

  event        Event?           @relation(fields: [eventId], references: [id])
  eventId      Int?

  promotion    Promotion?       @relation(fields: [promotionId], references: [id])
  promotionId  Int?
}